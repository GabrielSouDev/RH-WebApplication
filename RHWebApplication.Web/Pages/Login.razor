@page "/login"
<<<<<<< HEAD
@using RHWebApplication.Web.Requests
@inject HttpClient Http
=======
@using RHWebApplication.Shared.Models.UserModels
>>>>>>> 10dc2d2a6f97b77b35e997c3ba77477cbc4998b1
@inject CustomAuthStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

<PageTitle>Login</PageTitle>
<MudContainer Class="d-flex justify-center align-center" Style="height: 100vh;">
    <MudCard Style="width: 60%;">
        <MudCardContent>
            <MudForm>
                <MudText Typo="Typo.h5">Login</MudText>
                <MudTextField @bind-Value="user.Login" Label="Username" Required="true" />
                <MudTextField @bind-Value="user.Password" Label="Password" InputType="InputType.Password" Required="true" />
<<<<<<< HEAD
                <MudButton Type="Submit" Color="Color.Primary" OnClick="HandleLogin">Login</MudButton>
=======
        <MudButton Type="Submit" Color="Color.Primary" OnClick="HandleValidSubmitAsync">Login</MudButton>
>>>>>>> 10dc2d2a6f97b77b35e997c3ba77477cbc4998b1
            </MudForm>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
<<<<<<< HEAD
    private LoginRequest user;
    private async Task HandleLogin()
    {

        var response = await Http.PostAsJsonAsync("https://localhost:7019/login", user);

        if (response.IsSuccessStatusCode)
        {
            // Lê o token da resposta
            var token = await response.Content.ReadAsStringAsync();
            await AuthStateProvider.Login(token);
            NavigationManager.NavigateTo("/Home"); // Redireciona para a página inicial após o login
        }
        else
        {
            // Aqui você pode exibir uma mensagem de erro

            Console.WriteLine("Login falhou! Verifique suas credenciais.");
        }
    }
}
=======
    private User user = new User();

    private async Task HandleValidSubmitAsync()
    {
        await AuthStateProvider.Login(user);
        NavigationManager.NavigateTo("/Home");
    }
}
>>>>>>> 10dc2d2a6f97b77b35e997c3ba77477cbc4998b1
