@inject CustomAuthStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inherits LayoutComponentBase

<MudThemeProvider Theme="@currentTheme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider /> 

<MudLayout>
       <MudAppBar Class="d-flex align-items-center" Color="Color.Primary" Fixed="true" Elevation="25">
       <MudIconButton Disabled="@_notLogged" Icon="@arrowMenu" Color="Color.Inherit" Class="white-icon" OnClick="DrawerToggle" />
           <MudText Typo="Typo.h4">RH APPLICATION</MudText>
           <MudSpacer />
           <MudText Class="dropend" Typo="Typo.h6">@userName</MudText>
           <MudButton Disabled="@_notLogged" OnClick="LogoutAsync" Color="Color.Warning">Logout</MudButton>
           <MudButton Disabled="@_logged" OnClick="GoToLogin" Color="Color.Warning">Login</MudButton>
       </MudAppBar>
       <MudDrawer Class="menu-section" Open="@_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="10">
           <NavMenu></NavMenu>
       </MudDrawer>
       <MudMainContent Class="menu-content">
           @Body
       </MudMainContent>
</MudLayout>
@code {
    string? userName = string.Empty;
    bool _drawerOpen = false;
    bool _notLogged = true;
    bool _logged = false;
    string arrowMenu = Icons.Material.Filled.KeyboardDoubleArrowLeft;

    private MudTheme currentTheme = new MudTheme()
        {
            PaletteLight = RHApplicationPalette.CreatePallete
        };

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if(user.Identity.IsAuthenticated)
        {
            arrowMenu = _drawerOpen ? Icons.Material.Filled.KeyboardDoubleArrowLeft : Icons.Material.Filled.KeyboardDoubleArrowRight;
            userName = user.Identity.Name;
            _logged = true;
            _notLogged = false;
            _drawerOpen = true;  
        }
    }
    void GoToLogin()
    {
        NavigationManager.NavigateTo("/Login");
    }
    async Task LogoutAsync()
    {
        userName = string.Empty;
        _logged = false;
        _notLogged = true;
        _drawerOpen = false;
        await AuthStateProvider.Logout();
        NavigationManager.NavigateTo("/Login");
    }
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
        arrowMenu = _drawerOpen ? Icons.Material.Filled.KeyboardDoubleArrowLeft : Icons.Material.Filled.KeyboardDoubleArrowRight;
    }
}